// vite.config.mts
import { resolve } from "node:path";
import react from "file:///home/sergey/projects/react-form-controls/node_modules/@vitejs/plugin-react-swc/index.mjs";
import { defineConfig } from "file:///home/sergey/projects/react-form-controls/node_modules/vite/dist/node/index.js";
import dts from "file:///home/sergey/projects/react-form-controls/node_modules/vite-plugin-dts/dist/index.mjs";

// package.json
var peerDependencies = {
  react: "^18.2.0",
  "react-dom": "^18.2.0",
  "react-i18next": "^15.0.0"
};

// vite.config.mts
var __vite_injected_original_dirname = "/home/sergey/projects/react-form-controls";
var vite_config_default = defineConfig(async ({ mode, command }) => {
  console.log(mode, command);
  return {
    appType: "custom",
    build: {
      target: "esnext",
      minify: mode === "production",
      // sourcemap: true,
      cssTarget: mode === "production" ? void 0 : resolve(__vite_injected_original_dirname, "src/styles.css"),
      cssMinify: "esbuild",
      cssCodeSplit: false,
      emptyOutDir: true,
      lib: {
        entry: resolve(__vite_injected_original_dirname, "src/index.ts"),
        fileName: "index",
        formats: ["es", "cjs"]
      },
      rollupOptions: {
        external: ["react/jsx-runtime", ...Object.keys(peerDependencies)]
      },
      outDir: resolve(__vite_injected_original_dirname, "dist")
    },
    plugins: [
      dts({ rollupTypes: true }),
      react()
    ]
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcubXRzIiwgInBhY2thZ2UuanNvbiJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIi9ob21lL3NlcmdleS9wcm9qZWN0cy9yZWFjdC1mb3JtLWNvbnRyb2xzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvaG9tZS9zZXJnZXkvcHJvamVjdHMvcmVhY3QtZm9ybS1jb250cm9scy92aXRlLmNvbmZpZy5tdHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL2hvbWUvc2VyZ2V5L3Byb2plY3RzL3JlYWN0LWZvcm0tY29udHJvbHMvdml0ZS5jb25maWcubXRzXCI7Ly8vIDxyZWZlcmVuY2UgdHlwZXM9XCJ2aXRlc3RcIiAvPlxuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gJ25vZGU6cGF0aCc7XG5pbXBvcnQgcmVhY3QgZnJvbSAnQHZpdGVqcy9wbHVnaW4tcmVhY3Qtc3djJztcbmltcG9ydCB7IGRlZmluZUNvbmZpZywgVXNlckNvbmZpZywgQ29uZmlnRW52IH0gZnJvbSAndml0ZSc7XG5pbXBvcnQgZHRzIGZyb20gJ3ZpdGUtcGx1Z2luLWR0cydcbmltcG9ydCB7IHBlZXJEZXBlbmRlbmNpZXMgfSBmcm9tICcuL3BhY2thZ2UuanNvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyhhc3luYyAoeyBtb2RlLCBjb21tYW5kIH06IENvbmZpZ0Vudik6IFByb21pc2U8VXNlckNvbmZpZz4gID0+IHtcbiAgY29uc29sZS5sb2cobW9kZSwgY29tbWFuZCk7XG4gIHJldHVybiB7XG4gICAgYXBwVHlwZTogJ2N1c3RvbScsXG4gICAgYnVpbGQ6IHtcbiAgICAgIHRhcmdldDogJ2VzbmV4dCcsXG4gICAgICBtaW5pZnk6IG1vZGUgPT09ICdwcm9kdWN0aW9uJyxcbiAgICAgIC8vIHNvdXJjZW1hcDogdHJ1ZSxcbiAgICAgIGNzc1RhcmdldDogbW9kZSA9PT0gJ3Byb2R1Y3Rpb24nID8gdW5kZWZpbmVkIDogcmVzb2x2ZShfX2Rpcm5hbWUsICdzcmMvc3R5bGVzLmNzcycpLFxuICAgICAgY3NzTWluaWZ5OiAnZXNidWlsZCcsXG4gICAgICBjc3NDb2RlU3BsaXQ6IGZhbHNlLFxuICAgICAgZW1wdHlPdXREaXI6IHRydWUsXG4gICAgICBsaWI6IHtcbiAgICAgICAgZW50cnk6IHJlc29sdmUoX19kaXJuYW1lLCAnc3JjL2luZGV4LnRzJyksXG4gICAgICAgIGZpbGVOYW1lOiAnaW5kZXgnLFxuICAgICAgICBmb3JtYXRzOiBbJ2VzJywgJ2NqcyddLFxuICAgICAgfSxcbiAgICAgIHJvbGx1cE9wdGlvbnM6IHtcbiAgICAgICAgZXh0ZXJuYWw6IFsncmVhY3QvanN4LXJ1bnRpbWUnLCAuLi5PYmplY3Qua2V5cyhwZWVyRGVwZW5kZW5jaWVzKV0sXG4gICAgICB9LFxuICAgICAgb3V0RGlyOiByZXNvbHZlKF9fZGlybmFtZSwgJ2Rpc3QnKSxcbiAgICB9LFxuICAgIHBsdWdpbnM6IFtcbiAgICAgIGR0cyh7IHJvbGx1cFR5cGVzOiB0cnVlIH0pLFxuICAgICAgcmVhY3QoKSxcbiAgICBdLFxuICB9XG59KTsiLCAie1xuICBcIm5hbWVcIjogXCJAaXRzaWIvcmVhY3QtZm9ybS1jb250cm9sc1wiLFxuICBcImRlc2NyaXB0aW9uXCI6IFwiU3R5bGl6ZWQgZm9ybSBlbGVtZW50cywgd2l0aCBtaW5pbWFsIGRlcGVuZGVuY2llcyBhbmQgbWF4aW11bSBwZXJmb3JtYW5jZS4gc2VsZWN0LCBpbnB1dCwgY2hlY2tib3gsIGV0Yy5cIixcbiAgXCJ2ZXJzaW9uXCI6IFwiMC4wLjExXCIsXG4gIFwiYXV0aG9yXCI6IFwiU2VyZ2V5IDxpdHNpYi5zdUBnbWFpbC5jb20+XCIsXG4gIFwicmVwb3NpdG9yeVwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiZ2l0XCIsXG4gICAgXCJ1cmxcIjogXCJnaXQraHR0cHM6Ly9naXRodWIuY29tL2l0c2liL3JlYWN0LWZvcm0tY29udHJvbHMuZ2l0XCJcbiAgfSxcbiAgXCJsaWNlbnNlXCI6IFwiSVNDXCIsXG4gIFwicHVibGlzaENvbmZpZ1wiOiB7XG4gICAgXCJhY2Nlc3NcIjogXCJwdWJsaWNcIlxuICB9LFxuICBcInR5cGVcIjogXCJtb2R1bGVcIixcbiAgXCJmaWxlc1wiOiBbXG4gICAgXCJkaXN0XCJcbiAgXSxcbiAgXCJzaWRlRWZmZWN0c1wiOiBbXG4gICAgXCIqKi8qLmNzc1wiXG4gIF0sXG4gIFwibWFpblwiOiBcIi4vZGlzdC9pbmRleC5janNcIixcbiAgXCJtb2R1bGVcIjogXCIuL2Rpc3QvaW5kZXguanNcIixcbiAgXCJ0eXBlc1wiOiBcIi4vZGlzdC9pbmRleC5kLnRzXCIsXG4gIFwiZXhwb3J0c1wiOiB7XG4gICAgXCIuXCI6IHtcbiAgICAgIFwiaW1wb3J0XCI6IHtcbiAgICAgICAgXCJ0eXBlc1wiOiBcIi4vZGlzdC9pbmRleC5kLnRzXCIsXG4gICAgICAgIFwiZGVmYXVsdFwiOiBcIi4vZGlzdC9pbmRleC5qc1wiXG4gICAgICB9LFxuICAgICAgXCJyZXF1aXJlXCI6IHtcbiAgICAgICAgXCJ0eXBlc1wiOiBcIi4vZGlzdC9pbmRleC5kLnRzXCIsXG4gICAgICAgIFwiZGVmYXVsdFwiOiBcIi4vZGlzdC9pbmRleC5janNcIlxuICAgICAgfVxuICAgIH0sXG4gICAgXCIuL2Nzc1wiOiBcIi4vZGlzdC9zdHlsZS5jc3NcIlxuICB9LFxuICBcInNjcmlwdHNcIjoge1xuICAgIFwic3RhcnRcIjogXCJ2aXRlIGJ1aWxkIC0td2F0Y2hcIixcbiAgICBcImJ1aWxkXCI6IFwidml0ZSBidWlsZFwiLFxuICAgIFwibGludFwiOiBcImVzbGludCAuIC0tZXh0IHRzLHRzeCAtLXJlcG9ydC11bnVzZWQtZGlzYWJsZS1kaXJlY3RpdmVzIC0tbWF4LXdhcm5pbmdzIDBcIixcbiAgICBcInByZXZlcnNpb25cIjogXCJucG0gcnVuIGxpbnRcIixcbiAgICBcInBvc3R2ZXJzaW9uXCI6IFwiZ2l0IHB1c2ggJiYgZ2l0IHB1c2ggLS10YWdzXCJcbiAgfSxcbiAgXCJwZWVyRGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcInJlYWN0XCI6IFwiXjE4LjIuMFwiLFxuICAgIFwicmVhY3QtZG9tXCI6IFwiXjE4LjIuMFwiLFxuICAgIFwicmVhY3QtaTE4bmV4dFwiOiBcIl4xNS4wLjBcIlxuICB9LFxuICBcImRldkRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJAdHlwZXMvbm9kZVwiOiBcIl4yMC4xNC4xMlwiLFxuICAgIFwiQHR5cGVzL3JlYWN0XCI6IFwiXjE4LjMuMFwiLFxuICAgIFwiQHR5cGVzL3JlYWN0LWRvbVwiOiBcIl4xOC4zLjBcIixcbiAgICBcIkB0eXBlc2NyaXB0LWVzbGludC9lc2xpbnQtcGx1Z2luXCI6IFwiXjcuMTcuMFwiLFxuICAgIFwiQHR5cGVzY3JpcHQtZXNsaW50L3BhcnNlclwiOiBcIl43LjE3LjBcIixcbiAgICBcIkB2aXRlanMvcGx1Z2luLXJlYWN0XCI6IFwiXjQuMy4wXCIsXG4gICAgXCJAdml0ZWpzL3BsdWdpbi1yZWFjdC1zd2NcIjogXCJeMy43LjBcIixcbiAgICBcImF1dG9wcmVmaXhlclwiOiBcIl4xMC40LjE5XCIsXG4gICAgXCJlc2xpbnRcIjogXCJeOC41Ny4wXCIsXG4gICAgXCJlc2xpbnQtcGx1Z2luLXJlYWN0LWhvb2tzXCI6IFwiXjQuNi4yXCIsXG4gICAgXCJlc2xpbnQtcGx1Z2luLXJlYWN0LXJlZnJlc2hcIjogXCJeMC40LjdcIixcbiAgICBcInBvc3Rjc3NcIjogXCJeOC40LjQwXCIsXG4gICAgXCJwb3N0Y3NzLW5lc3RpbmdcIjogXCJeMTIuMS41XCIsXG4gICAgXCJ0eXBlc2NyaXB0XCI6IFwiNS40LjJcIixcbiAgICBcInZpdGVcIjogXCJeNS4zLjVcIixcbiAgICBcInZpdGUtcGx1Z2luLWR0c1wiOiBcIl40LjAuMC1iZXRhLjJcIixcbiAgICBcInZpdGVzdFwiOiBcIl4yLjAuNFwiXG4gIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFDQSxTQUFTLGVBQWU7QUFDeEIsT0FBTyxXQUFXO0FBQ2xCLFNBQVMsb0JBQTJDO0FBQ3BELE9BQU8sU0FBUzs7O0FDdUNkLHVCQUFvQjtBQUFBLEVBQ2xCLE9BQVM7QUFBQSxFQUNULGFBQWE7QUFBQSxFQUNiLGlCQUFpQjtBQUNuQjs7O0FEL0NGLElBQU0sbUNBQW1DO0FBT3pDLElBQU8sc0JBQVEsYUFBYSxPQUFPLEVBQUUsTUFBTSxRQUFRLE1BQXVDO0FBQ3hGLFVBQVEsSUFBSSxNQUFNLE9BQU87QUFDekIsU0FBTztBQUFBLElBQ0wsU0FBUztBQUFBLElBQ1QsT0FBTztBQUFBLE1BQ0wsUUFBUTtBQUFBLE1BQ1IsUUFBUSxTQUFTO0FBQUE7QUFBQSxNQUVqQixXQUFXLFNBQVMsZUFBZSxTQUFZLFFBQVEsa0NBQVcsZ0JBQWdCO0FBQUEsTUFDbEYsV0FBVztBQUFBLE1BQ1gsY0FBYztBQUFBLE1BQ2QsYUFBYTtBQUFBLE1BQ2IsS0FBSztBQUFBLFFBQ0gsT0FBTyxRQUFRLGtDQUFXLGNBQWM7QUFBQSxRQUN4QyxVQUFVO0FBQUEsUUFDVixTQUFTLENBQUMsTUFBTSxLQUFLO0FBQUEsTUFDdkI7QUFBQSxNQUNBLGVBQWU7QUFBQSxRQUNiLFVBQVUsQ0FBQyxxQkFBcUIsR0FBRyxPQUFPLEtBQUssZ0JBQWdCLENBQUM7QUFBQSxNQUNsRTtBQUFBLE1BQ0EsUUFBUSxRQUFRLGtDQUFXLE1BQU07QUFBQSxJQUNuQztBQUFBLElBQ0EsU0FBUztBQUFBLE1BQ1AsSUFBSSxFQUFFLGFBQWEsS0FBSyxDQUFDO0FBQUEsTUFDekIsTUFBTTtBQUFBLElBQ1I7QUFBQSxFQUNGO0FBQ0YsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
